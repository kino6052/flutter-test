import 'package:flutter/material.dart';
import 'Decoupler.dart';

class TProps {
  final String input;
  final List<String> messages;

  TProps({this.input = '', this.messages = const []});
}

Decoupler<TProps, String, String, String> decoupler = Decoupler(
    initialState: TProps(),
    reducer: (state, action) {
      print(state.input);
      print('Reducer!');

      if (action.id.id == 'input') {
        if (action.type == 'change') {
          return TProps(
              input: action.payload ?? state.input, messages: state.messages);
        }

        if (action.type == 'submit') {
          return TProps(
              input: state.input, messages: [state.input, ...state.messages]);
        }
      }

      return state;
    });

void main() {
  decoupler.registerIOHandler((state) =>
      runApp(FigmaToCodeApp(input: state.input, messages: state.messages)));

  decoupler.init();
}

// Generated by: https://www.figma.com/community/plugin/842128343887142055/
class FigmaToCodeApp extends StatelessWidget {
  final String input;
  final List<String> messages;

  const FigmaToCodeApp(
      {super.key, required this.input, required this.messages});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color.fromARGB(255, 18, 32, 47),
      ),
      home: Scaffold(
        body: ListView(children: [
          ChatFrame(messages: messages),
        ]),
      ),
    );
  }
}

typedef CustomWidgetBuilder = Widget Function(BuildContext,
    {void Function(String value)? onChanged,
    void Function(String value)? onFieldSubmitted});

class MyWrapperWidget extends StatelessWidget {
  final CustomWidgetBuilder child;

  MyWrapperWidget({required this.child});

  void onChanged(value) {
    decoupler.sendAction(
        CAction(type: 'change', id: TId(id: 'input'), payload: value));
  }

  void onFieldSubmitted(value) {
    decoupler.sendAction(CAction(type: 'submit', id: TId(id: 'input')));
  }

  @override
  Widget build(BuildContext context) {
    return this.child(context,
        onChanged: onChanged, onFieldSubmitted: onFieldSubmitted);
  }
}

class ChatFrame extends StatelessWidget {
  final List<String> messages;

  const ChatFrame({super.key, required this.messages});

  @override
  Widget build(
    BuildContext context,
  ) {
    return Column(
      children: [
        Container(
          width: 597,
          height: 582,
          padding: const EdgeInsets.symmetric(horizontal: 23, vertical: 26),
          decoration: BoxDecoration(color: Color(0xFF444654)),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              SizedBox(
                width: double.infinity,
                height: 48,
                child: Text(
                  'Figma Chat',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontFamily: 'Inter',
                    fontWeight: FontWeight.w700,
                  ),
                ),
              ),
              const SizedBox(height: 16),
              Expanded(
                child: Container(
                  width: double.infinity,
                  padding: const EdgeInsets.symmetric(vertical: 10),
                  clipBehavior: Clip.antiAlias,
                  decoration: BoxDecoration(),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        width: double.infinity,
                        height: 187,
                        child: Column(
                            mainAxisSize: MainAxisSize.min,
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: messages.map((item) {
                              return Container(
                                width: double.infinity,
                                padding: const EdgeInsets.all(16),
                                clipBehavior: Clip.antiAlias,
                                decoration: BoxDecoration(
                                  color: Color(0xFF444654),
                                  // border: Border.(
                                  //   left: BorderSide(color: Color(0xFFCDCDCD)),
                                  //   top: BorderSide(color: Color(0xFFCDCDCD)),
                                  //   right: BorderSide(color: Color(0xFFCDCDCD)),
                                  //   bottom: BorderSide(
                                  //       width: 0.50, color: Color(0xFFCDCDCD)),
                                  // ),
                                ),
                                child: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  crossAxisAlignment: CrossAxisAlignment.center,
                                  children: [
                                    Container(
                                      width: 25,
                                      height: 25,
                                      decoration: ShapeDecoration(
                                        color: Colors.white,
                                        shape: OvalBorder(),
                                      ),
                                    ),
                                    Text(
                                      item,
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 12,
                                        fontFamily: 'Inter',
                                        fontWeight: FontWeight.w400,
                                      ),
                                    ),
                                  ],
                                ),
                              );
                            }).toList()
                            // [

                            //   Container(
                            //     width: double.infinity,
                            //     padding: const EdgeInsets.all(16),
                            //     clipBehavior: Clip.antiAlias,
                            //     decoration: BoxDecoration(
                            //       color: Color(0xFF444654),
                            //       // border: Border.only(
                            //       //   left: BorderSide(color: Color(0xFFCDCDCD)),
                            //       //   top: BorderSide(color: Color(0xFFCDCDCD)),
                            //       //   right: BorderSide(color: Color(0xFFCDCDCD)),
                            //       //   bottom: BorderSide(
                            //       //       width: 0.50, color: Color(0xFFCDCDCD)),
                            //       // ),
                            //     ),
                            //     child: Row(
                            //       mainAxisSize: MainAxisSize.min,
                            //       mainAxisAlignment: MainAxisAlignment.start,
                            //       crossAxisAlignment: CrossAxisAlignment.center,
                            //       children: [
                            //         Container(
                            //           width: 25,
                            //           height: 25,
                            //           decoration: ShapeDecoration(
                            //             color: Colors.white,
                            //             shape: OvalBorder(),
                            //           ),
                            //         ),
                            //         Text(
                            //           'This is text!',
                            //           style: TextStyle(
                            //             color: Colors.white,
                            //             fontSize: 12,
                            //             fontFamily: 'Inter',
                            //             fontWeight: FontWeight.w400,
                            //           ),
                            //         ),
                            //       ],
                            //     ),
                            //   ),
                            //   Container(
                            //     width: double.infinity,
                            //     padding: const EdgeInsets.all(16),
                            //     clipBehavior: Clip.antiAlias,
                            //     decoration: BoxDecoration(
                            //       color: Color(0xFF444654),
                            //       // border: Border.only(
                            //       //   left: BorderSide(color: Color(0xFFCDCDCD)),
                            //       //   top: BorderSide(color: Color(0xFFCDCDCD)),
                            //       //   right: BorderSide(color: Color(0xFFCDCDCD)),
                            //       //   bottom: BorderSide(
                            //       //       width: 0.50, color: Color(0xFFCDCDCD)),
                            //       // ),
                            //     ),
                            //     child: Row(
                            //       mainAxisSize: MainAxisSize.min,
                            //       mainAxisAlignment: MainAxisAlignment.start,
                            //       crossAxisAlignment: CrossAxisAlignment.center,
                            //       children: [
                            //         Container(
                            //           width: 25,
                            //           height: 25,
                            //           decoration: ShapeDecoration(
                            //             color: Colors.white,
                            //             shape: OvalBorder(),
                            //           ),
                            //         ),
                            //         Text(
                            //           'This is text!',
                            //           style: TextStyle(
                            //             color: Colors.white,
                            //             fontSize: 12,
                            //             fontFamily: 'Inter',
                            //             fontWeight: FontWeight.w400,
                            //           ),
                            //         ),
                            //       ],
                            //     ),
                            //   ),
                            // ],
                            ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
              Container(
                width: double.infinity,
                padding: const EdgeInsets.symmetric(horizontal: 24),
                decoration: ShapeDecoration(
                  color: Colors.white,
                  shape: RoundedRectangleBorder(
                    side: BorderSide(width: 1, color: Color(0xFFCDCDCD)),
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    SizedBox(
                        width: 503,
                        height: 40,
                        child: MyWrapperWidget(child: (BuildContext context,
                            {void Function(String value)? onChanged,
                            void Function(String value)? onFieldSubmitted}) {
                          return TextFormField(
                              onChanged: onChanged,
                              onFieldSubmitted: onFieldSubmitted,
                              style: TextStyle(
                                color: Color(0xFF333333),
                                fontSize: 12,
                                fontFamily: 'Inter',
                                fontWeight: FontWeight.w400,
                              ));
                        })),
                  ],
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // TRY THIS: Try running your application with "flutter run". You'll see
        // the application has a blue toolbar. Then, without quitting the app,
        // try changing the seedColor in the colorScheme below to Colors.green
        // and then invoke "hot reload" (save your changes or press the "hot
        // reload" button in a Flutter-supported IDE, or press "r" if you used
        // the command line to start the app).
        //
        // Notice that the counter didn't reset back to zero; the application
        // state is not lost during the reload. To reset the state, use hot
        // restart instead.
        //
        // This works for code too, not just values: Most code changes can be
        // tested with just a hot reload.
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    // decoupler.sendAction(CAction(type: 'test', id: {'id': 'test'}));
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // TRY THIS: Try changing the color here to a specific color (to
        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar
        // change color while the other colors stay the same.
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          //
          // TRY THIS: Invoke "debug painting" (choose the "Toggle Debug Paint"
          // action in the IDE, or press "p" in the console), to see the
          // wireframe for each widget.
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
