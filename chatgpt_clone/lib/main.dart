import 'package:flutter/material.dart';
import 'Decoupler.dart';

class TProps {
  final String input;
  final List<String> messages;

  TProps({this.input = '', this.messages = const []});
}

Decoupler<TProps, String, String, String> decoupler = Decoupler(
    initialState: TProps(),
    reducer: (state, action) {
      print(state.input);
      print('Reducer!');

      if (action.id.id == 'input') {
        if (action.type == 'change') {
          return TProps(
              input: action.payload ?? state.input, messages: state.messages);
        }

        if (action.type == 'submit') {
          return TProps(
              input: state.input, messages: [state.input, ...state.messages]);
        }
      }

      return state;
    });

void main() {
  decoupler.registerIOHandler((state) =>
      runApp(FigmaToCodeApp(input: state.input, messages: state.messages)));

  decoupler.init();
}

// Generated by: https://www.figma.com/community/plugin/842128343887142055/
class FigmaToCodeApp extends StatelessWidget {
  final String input;
  final List<String> messages;

  const FigmaToCodeApp(
      {super.key, required this.input, required this.messages});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color.fromARGB(255, 18, 32, 47),
      ),
      home: Scaffold(
        body: ListView(children: [
          ChatFrame(messages: messages),
        ]),
      ),
    );
  }
}

typedef CustomWidgetBuilder = Widget Function(BuildContext,
    {void Function(String value)? onChanged,
    void Function(String value)? onFieldSubmitted});

class MyWrapperWidget extends StatelessWidget {
  final CustomWidgetBuilder child;

  MyWrapperWidget({required this.child});

  void onChanged(value) {
    decoupler.sendAction(
        CAction(type: 'change', id: TId(id: 'input'), payload: value));
  }

  void onFieldSubmitted(value) {
    decoupler.sendAction(CAction(type: 'submit', id: TId(id: 'input')));
  }

  @override
  Widget build(BuildContext context) {
    return this.child(context,
        onChanged: onChanged, onFieldSubmitted: onFieldSubmitted);
  }
}

class ChatFrame extends StatelessWidget {
  final List<String> messages;

  const ChatFrame({super.key, required this.messages});

  @override
  Widget build(
    BuildContext context,
  ) {
    return Column(
      children: [
        Container(
          width: 597,
          height: 582,
          padding: const EdgeInsets.symmetric(horizontal: 23, vertical: 26),
          decoration: BoxDecoration(color: Color(0xFF444654)),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              SizedBox(
                width: double.infinity,
                height: 48,
                child: Text(
                  'Figma Chat',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontFamily: 'Inter',
                    fontWeight: FontWeight.w700,
                  ),
                ),
              ),
              const SizedBox(height: 16),
              Expanded(
                child: Container(
                  width: double.infinity,
                  padding: const EdgeInsets.symmetric(vertical: 10),
                  clipBehavior: Clip.antiAlias,
                  decoration: BoxDecoration(),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        width: double.infinity,
                        height: 187,
                        child: Column(
                            mainAxisSize: MainAxisSize.min,
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: messages.map((item) {
                              return Container(
                                width: double.infinity,
                                padding: const EdgeInsets.all(16),
                                clipBehavior: Clip.antiAlias,
                                decoration: BoxDecoration(
                                  color: Color(0xFF444654),
                                  // border: Border.(
                                  //   left: BorderSide(color: Color(0xFFCDCDCD)),
                                  //   top: BorderSide(color: Color(0xFFCDCDCD)),
                                  //   right: BorderSide(color: Color(0xFFCDCDCD)),
                                  //   bottom: BorderSide(
                                  //       width: 0.50, color: Color(0xFFCDCDCD)),
                                  // ),
                                ),
                                child: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  crossAxisAlignment: CrossAxisAlignment.center,
                                  children: [
                                    Container(
                                      width: 25,
                                      height: 25,
                                      decoration: ShapeDecoration(
                                        color: Colors.white,
                                        shape: OvalBorder(),
                                      ),
                                    ),
                                    Text(
                                      item,
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 12,
                                        fontFamily: 'Inter',
                                        fontWeight: FontWeight.w400,
                                      ),
                                    ),
                                  ],
                                ),
                              );
                            }).toList()),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
              Container(
                width: double.infinity,
                padding: const EdgeInsets.symmetric(horizontal: 24),
                decoration: ShapeDecoration(
                  color: Colors.white,
                  shape: RoundedRectangleBorder(
                    side: BorderSide(width: 1, color: Color(0xFFCDCDCD)),
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    SizedBox(
                        width: 503,
                        height: 40,
                        child: MyWrapperWidget(child: (BuildContext context,
                            {void Function(String value)? onChanged,
                            void Function(String value)? onFieldSubmitted}) {
                          return TextFormField(
                              onChanged: onChanged,
                              onFieldSubmitted: onFieldSubmitted,
                              style: TextStyle(
                                color: Color(0xFF333333),
                                fontSize: 12,
                                fontFamily: 'Inter',
                                fontWeight: FontWeight.w400,
                              ));
                        })),
                  ],
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
}
